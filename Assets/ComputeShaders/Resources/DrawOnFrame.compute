#pragma kernel DrawTexCharacter
#pragma kernel DrawTexSpell
#include "Utils.cginc"

RWTexture2D<float4> FrameTex;
Texture2D<float4> BrushTex;

uint MousePosX;
uint MousePosY;
uint BrushWidth;
uint BrushHeight;
int PixelId;
int PixelUsage;
int PixelTimestamp;
uint FrameWidth;
uint FrameHeight;
uint ColorTexWidth;
uint ColorTexHeight;

Texture2D<float4> ColorTex;

RWStructuredBuffer<int> DownBorderTouched;
RWStructuredBuffer<int> PixelsAdded;
RWStructuredBuffer<int> PixelIds;
RWStructuredBuffer<int> PixelUsages;
RWStructuredBuffer<int> PixelTimestamps;
RWStructuredBuffer<int> PixelUsagesTouched;

void CheckPixelUsagesNear(uint3 coord)
{
    int colorUsageNear;
    uint index = (coord.y + 1) * FrameWidth + coord.x;
    if(coord.y + 1 < FrameHeight && PixelTimestamp != PixelTimestamps[index] && PixelTimestamps[index] != 0)
    {
        int north = ((coord.y + 1) * FrameWidth) + coord.x;
        colorUsageNear = PixelUsages[north];
        PixelUsagesTouched[colorUsageNear] = 1;
    }
    
    index = coord.y * FrameWidth + (coord.x + 1);
    if(coord.x + 1 < FrameWidth && PixelTimestamp != PixelTimestamps[index] && PixelTimestamps[index] != 0)
    {
        int est = (coord.y * FrameWidth) + ( coord.x + 1);
        colorUsageNear = PixelUsages[est];
        PixelUsagesTouched[colorUsageNear] = 1;
    }

    index = (coord.y - 1) * FrameWidth + coord.x;
    if(coord.y - 1 >= 0 && PixelTimestamp != PixelTimestamps[index] && PixelTimestamps[index] != 0)
    {
        int south = ((coord.y - 1) * FrameWidth) + coord.x;
        colorUsageNear = PixelUsages[south];
        PixelUsagesTouched[colorUsageNear] = 1;
    }

    index = coord.y * FrameWidth + (coord.x - 1);
    if(coord.x - 1 >= 0 && PixelTimestamp != PixelTimestamps[index] && PixelTimestamps[index] != 0)
    {
        int west = (coord.y * FrameWidth) + ( coord.x - 1);
        colorUsageNear = PixelUsages[west];
        PixelUsagesTouched[colorUsageNear] = 1;
    }
}

uint2 GetBrushOrigin()
{
    return uint2(MousePosX - ((BrushWidth) / 2), MousePosY - ((BrushHeight ) / 2) );
}

bool IsPixelColored(int3 id)
{
    return PixelIds[(id.y * FrameWidth ) + id.x] == PixelId;
}

[numthreads(32,32,1)]
void DrawTexCharacter (int3 id : SV_DispatchThreadID)
{
    if(IsPixelColored(id))
        return;

    uint2 brushOrigin = GetBrushOrigin();
    uint2 brushPixCoordinate = uint2(id.xy - brushOrigin);

    if(brushPixCoordinate.x >= BrushWidth || brushPixCoordinate.y >= BrushHeight)
        return;

    uint2 texUv = uint2(id.x % ColorTexWidth, id.y % ColorTexHeight); 
    uint index = (id.y * FrameWidth ) + id.x;
    uint currentPixelId = PixelIds[index];
    
    if(currentPixelId > 0)
        return;

    if(Equals(BrushTex[brushPixCoordinate].r, 0))
    {
        // stroke validation
        CheckPixelUsagesNear(id);
        if(DownBorderTouched[0] == 0)
            DownBorderTouched[0] = id.y == 0 ? 1 : 0;

        // Color texture
        FrameTex[id.xy] = ColorTex[texUv];

        // Complete texture infos
        PixelIds[index] = PixelId;
        PixelUsages[index] = PixelUsage;
        PixelTimestamps[index] = PixelTimestamp;

        // Count pixels drawed
        InterlockedAdd(PixelsAdded[0],1);
    }
}

[numthreads(32,32,1)]
void DrawTexSpell (int3 id : SV_DispatchThreadID)
{
    if(IsPixelColored(id))
        return;

    uint2 brushOrigin = GetBrushOrigin();
    uint2 brushPixCoordinate = uint2(id.xy - brushOrigin);

    if(brushPixCoordinate.x >= BrushWidth || brushPixCoordinate.y >= BrushHeight)
        return;

    uint2 texUv = uint2(id.x % ColorTexWidth, id.y % ColorTexHeight); 
    uint index = (id.y * FrameWidth ) + id.x;

    if(Equals(BrushTex[brushPixCoordinate].r, 0))
    {
        // stroke validation
        CheckPixelUsagesNear(id);
        if(DownBorderTouched[0] == 0)
            DownBorderTouched[0] = id.y == 0 ? 1 : 0;

        // Color texture
        FrameTex[id.xy] = ColorTex[texUv];

        // Complete texture infos
        PixelIds[index] = PixelId;
        PixelUsages[index] = PixelUsage;
        PixelTimestamps[index] = PixelTimestamp;

        // Count pixels drawed
        InterlockedAdd(PixelsAdded[0],1);
    }
}